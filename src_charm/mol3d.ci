mainmodule mol3d {

  readonly CProxy_Main mainProxy;  
  readonly CProxy_Patch patchArray;
  readonly CProxy_Compute computeArray;
  readonly CkGroupID mCastGrpID;

  readonly message vdwParams *vdwTable;	// vdw params table
  readonly message sqrtTable *rootTable; // sqrt itnerpolation table

  readonly int numParts;	// total number of particles
  readonly int patchArrayDimX;	// X dimension of the Patch array 
  readonly int patchArrayDimY;	// Y dimension of the Patch array
  readonly int patchArrayDimZ;	// Y dimension of the Patch array
  readonly int patchSizeX;	// size of each Patch
  readonly int patchSizeY;	// size of each Patch
  readonly int patchSizeZ;	// size of each Patch
  readonly int ptpCutOff;	// cut off for atom to atom forces
  readonly int patchMargin;	// difference between patchSize and ptpCutOff
  readonly int patchOriginX;    // X-coor of patch origin
  readonly int patchOriginY;	// Y-coor of patch origin
  readonly int patchOriginZ;	// Z-coor of patch origin
  readonly int compArrayLenX;   // X dimension of Compositer array
  readonly int compArrayLenY;   // Y dimension of Compositer array
  readonly int compArrayLenZ;   // Z dimension of Compositer array
  readonly int migrateStepCount;// interval between patch migrations
  readonly int finalStepCount;	// number of steps at which the cells should stop computation
  readonly int firstLdbStep;	// do load balancing after this many steps
  readonly int ldbPeriod;	// do load balancing every period
  readonly int ftPeriod;	// do load balancing every period
  readonly BigReal stepTime;
  readonly BigReal timeDelta;	// real time per step
  readonly double A;		// LJ parameter
  readonly double B;		// LJ parameter
  readonly bool usePairLists;	// determines whether or not to use pairlists for point to point force calculations
  readonly bool twoAwayX;	// determines whether patches can be divided into half in the x direction
  readonly bool twoAwayY;	// determines whether patches can be divided into half in the y direction
  readonly bool twoAwayZ;	// determines whether patches can be divided into half in the z direction
  readonly int numNbrs;	
  readonly int nbrsX;	
  readonly int nbrsY;	
  readonly int nbrsZ;	
  

  mainchare [migratable] Main {
    entry Main(CkArgMsg* msg);
    entry void allDone();
    entry void lbBarrier();
    entry void ftBarrier();
    entry void startUpDone();
  };

  message vdwParams {
    vdwPars params[];
  };


  message sqrtTable {
    sqrtPars pars[];
  };


  message ParticleDataMsg{
    partData part[];
  };

  message ParticleForceMsg{
    force forces[];
  };

  message FileDataMsg{
    BigReal charge[];
    BigReal mass[];
    loc coords[];
    int vdw_type[];
  };

  array [3D] Patch {
    entry Patch(FileDataMsg* fdmsg);
    entry void start();
    entry void createComputes();
    entry void createSection();
    entry void receiveForces(ParticleForceMsg *updates);
    entry void reduceForces(CkReductionMsg *msg);
    entry void resume();
    entry void ftresume();
    entry void receiveParticles(CkVec<Particle> updates);
    entry [local] void checkNextStep();
    entry void ResumeFromSync();
  };

  array [6D] Compute {
    entry Compute();
    entry void interact(ParticleDataMsg *msg);
    entry void ResumeFromSync();
  };

};
