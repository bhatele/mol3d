mainmodule mol3d {
  extern module reader;

  readonly CProxy_Main mainProxy;
  readonly CProxy_Patch patchArray;
  readonly CProxy_Compute computeArray;
  readonly CkGroupID mCastGrpID;

  readonly int numParts;	// total number of particles
  readonly int patchArrayDimX;	// X dimension of the Patch array
  readonly int patchArrayDimY;	// Y dimension of the Patch array
  readonly int patchArrayDimZ;	// Y dimension of the Patch array
  readonly int patchSizeX;	// size of each Patch
  readonly int patchSizeY;	// size of each Patch
  readonly int patchSizeZ;	// size of each Patch
  readonly int patchOriginX;	// X-coor of patch origin
  readonly int patchOriginY;	// Y-coor of patch origin
  readonly int patchOriginZ;	// Z-coor of patch origin

  readonly bool usePairLists;	// determines whether or not to use pairlists
				// for point to point force calculations
  readonly int numNbrs;
  readonly int nbrsX;
  readonly int nbrsY;
  readonly int nbrsZ;

  mainchare [migratable] Main {
    entry Main(CkArgMsg* msg);
    entry void allDone();
    entry void lbBarrier();
    entry void ftBarrier();
    entry void startUpDone();
  };

  message ParticleDataMsg {
    partData part[];
  };

  message ParticleForceMsg {
    force forces[];
  };

  array [3D] Patch {
    entry Patch(FileDataMsg* fdmsg);
    entry void start();
    entry void createComputes();
    entry void createSection();
    entry void receiveForces(ParticleForceMsg *updates);
    entry void reduceForces(CkReductionMsg *msg);
    entry void resume();
    entry void ftresume();
    entry void receiveParticles(CkVec<Particle> updates);
    entry [local] void checkNextStep();
    entry void ResumeFromSync();
  };

  array [6D] Compute {
    entry Compute();
    entry void interact(ParticleDataMsg *msg);
    entry void ResumeFromSync();
  };

};
